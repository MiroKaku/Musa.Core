// National Language Support
#include "KernelBase.Private.h"
#include "KernelBase.NLS.Private.h"

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGE, MUSA_NAME(MultiByteToWideChar))
#pragma alloc_text(PAGE, MUSA_NAME(WideCharToMultiByte))
#endif


EXTERN_C_START
namespace Musa
{
#ifdef _KERNEL_MODE

    static constexpr CPINFOEXW NlsCodePageInfoTable[] =
    {
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 37, {L"37    (IBM EBCDIC - U.S./Canada)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 437, {L"437   (OEM - United States)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 500, {L"500   (IBM EBCDIC - International)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 708, {L"708   (Arabic - ASMO)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 720, {L"720   (Arabic - Transparent ASMO)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 737, {L"737   (OEM - Greek 437G)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 775, {L"775   (OEM - Baltic)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 850, {L"850   (OEM - Multilingual Latin I)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 852, {L"852   (OEM - Latin II)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 855, {L"855   (OEM - Cyrillic)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 857, {L"857   (OEM - Turkish)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 858, {L"858   (OEM - Multilingual Latin I + Euro)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 860, {L"860   (OEM - Portuguese)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 861, {L"861   (OEM - Icelandic)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 862, {L"862   (OEM - Hebrew)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 863, {L"863   (OEM - Canadian French)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 864, {L"864   (OEM - Arabic)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 865, {L"865   (OEM - Nordic)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 866, {L"866   (OEM - Russian)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 869, {L"869   (OEM - Modern Greek)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 870, {L"870   (IBM EBCDIC - Multilingual/ROECE (Latin-2))"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 874, {L"874   (ANSI/OEM - Thai)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 875, {L"875   (IBM EBCDIC - Modern Greek)"}},
        {2, {"?"}, {0x81, 0x9F, 0xE0, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'¡¤', 932, {L"932   (ANSI/OEM - Japanese Shift-JIS)"}},
        {2, {"?"}, {0x81, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 936, {L"936   (ANSI/OEM - Simplified Chinese GBK)"}},
        {2, {"?"}, {0x81, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 949, {L"949   (ANSI/OEM - Korean)"}},
        {2, {"?"}, {0x81, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 950, {L"950   (ANSI/OEM - Traditional Chinese Big5)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1026, {L"1026  (IBM EBCDIC - Turkish (Latin-5))"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1047, {L"1047  (IBM EBCDIC - Latin-1/Open System)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1140, {L"1140  (IBM EBCDIC - U.S./Canada (37 + Euro))"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1141, {L"1141  (IBM EBCDIC - Germany (20273 + Euro))"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1142, {L"1142  (IBM EBCDIC - Denmark/Norway (20277 + Euro))"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1143, {L"1143  (IBM EBCDIC - Finland/Sweden (20278 + Euro))"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1144, {L"1144  (IBM EBCDIC - Italy (20280 + Euro))"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1145, {L"1145  (IBM EBCDIC - Latin America/Spain (20284 + Euro))"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1146, {L"1146  (IBM EBCDIC - United Kingdom (20285 + Euro))"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1148, {L"1148  (IBM EBCDIC - International (500 + Euro))"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1149, {L"1149  (IBM EBCDIC - Icelandic (20871 + Euro))"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1250, {L"1250  (ANSI - Central Europe)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1251, {L"1251  (ANSI - Cyrillic)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1252, {L"1252  (ANSI - Latin I)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1253, {L"1253  (ANSI - Greek)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1254, {L"1254  (ANSI - Turkish)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1255, {L"1255  (ANSI - Hebrew)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1256, {L"1256  (ANSI - Arabic)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1257, {L"1257  (ANSI - Baltic)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1258, {L"1258  (ANSI/OEM - Viet Nam)"}},
        {2, {"?"}, {0x84, 0xD3, 0xD8, 0xDE, 0xE0, 0xF9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 1361, {L"1361  (Korean - Johab)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10000, {L"10000 (MAC - Roman)"}},
        {2, {"?"}, {0x81, 0x9F, 0xE0, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'¡¤', 10001, {L"10001 (MAC - Japanese)"}},
        {2, {"?"}, {0x81, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10002, {L"10002 (MAC - Traditional Chinese Big5)"}},
        {2, {"?"}, {0xA1, 0xAC, 0xB0, 0xC8, 0xCA, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10003, {L"10003 (MAC - Korean)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10004, {L"10004 (MAC - Arabic)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10005, {L"10005 (MAC - Hebrew)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10006, {L"10006 (MAC - Greek I)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10007, {L"10007 (MAC - Cyrillic)"}},
        {2, {"?"}, {0xA1, 0xA9, 0xB0, 0xF7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10008, {L"10008 (MAC - Simplified Chinese GB 2312)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10010, {L"10010 (MAC - Romania)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10017, {L"10017 (MAC - Ukraine)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10021, {L"10021 (MAC - Thai)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10029, {L"10029 (MAC - Latin II)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10079, {L"10079 (MAC - Icelandic)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10081, {L"10081 (MAC - Turkish)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 10082, {L"10082 (MAC - Croatia)"}},
        {2, {"?"}, {0xA1, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20000, {L"20000 (CNS - Taiwan)"}},
        {2, {"?"}, {0x81, 0x84, 0x91, 0xD8, 0xDF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20001, {L"20001 (TCA - Taiwan)"}},
        {2, {"?"}, {0x81, 0xAF, 0xDD, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20002, {L"20002 (Eten - Taiwan)"}},
        {2, {"?"}, {0x81, 0x84, 0x87, 0x87, 0x89, 0xE8, 0xF9, 0xFB, 0x00, 0x00, 0x00, 0x00}, L'?', 20003, {L"20003 (IBM5550 - Taiwan)"}},
        {2, {"?"}, {0xA1, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20004, {L"20004 (TeleText - Taiwan)"}},
        {2, {"?"}, {0x8D, 0xF5, 0xF9, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20005, {L"20005 (Wang - Taiwan)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20105, {L"20105 (IA5 IRV International Alphabet No.5)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20106, {L"20106 (IA5 German)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20107, {L"20107 (IA5 Swedish)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20108, {L"20108 (IA5 Norwegian)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20127, {L"20127 (US-ASCII)"}},
        {2, {"?"}, {0xC1, 0xCF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20261, {L"20261 (T.61)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20269, {L"20269 (ISO 6937 Non-Spacing Accent)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20273, {L"20273 (IBM EBCDIC - Germany)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20277, {L"20277 (IBM EBCDIC - Denmark/Norway)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20278, {L"20278 (IBM EBCDIC - Finland/Sweden)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20280, {L"20280 (IBM EBCDIC - Italy)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20284, {L"20284 (IBM EBCDIC - Latin America/Spain)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20285, {L"20285 (IBM EBCDIC - United Kingdom)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20290, {L"20290 (IBM EBCDIC - Japanese Katakana Extended)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20297, {L"20297 (IBM EBCDIC - France)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20420, {L"20420 (IBM EBCDIC - Arabic)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20423, {L"20423 (IBM EBCDIC - Greek)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20424, {L"20424 (IBM EBCDIC - Hebrew)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20833, {L"20833 (IBM EBCDIC - Korean Extended)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20838, {L"20838 (IBM EBCDIC - Thai)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20866, {L"20866 (Russian - KOI8)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20871, {L"20871 (IBM EBCDIC - Icelandic)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20880, {L"20880 (IBM EBCDIC - Cyrillic (Russian))"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20905, {L"20905 (IBM EBCDIC - Turkish)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20924, {L"20924 (IBM EBCDIC - Latin-1/Open System (1047 + Euro))"}},
        {2, {"?"}, {0x8E, 0x8E, 0xA1, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'¡¤', 20932, {L"20932 (JIS X 0208-1990 & 0212-1990)"}},
        {2, {"?"}, {0xA1, 0xA9, 0xB0, 0xF7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 20936, {L"20936 (Simplified Chinese GB2312)"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 21025, {L"21025 (IBM EBCDIC - Cyrillic (Serbian, Bulgarian))"}},
        {1, {"o"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 21027, {L"21027 (Ext Alpha Lowercase)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 21866, {L"21866 (Ukrainian - KOI8-U)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 28591, {L"28591 (ISO 8859-1 Latin I)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 28592, {L"28592 (ISO 8859-2 Central Europe)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 28593, {L"28593 (ISO 8859-3 Latin 3)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 28594, {L"28594 (ISO 8859-4 Baltic)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 28595, {L"28595 (ISO 8859-5 Cyrillic)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 28596, {L"28596 (ISO 8859-6 Arabic)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 28597, {L"28597 (ISO 8859-7 Greek)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 28598, {L"28598 (ISO 8859-8 Hebrew: Visual Ordering)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 28599, {L"28599 (ISO 8859-9 Latin 5)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 28603, {L"28603 (ISO 8859-13 Latin 7)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 28605, {L"28605 (ISO 8859-15 Latin 9)"}},
        {1, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 38598, {L"38598 (ISO 8859-8 Hebrew: Logical Ordering)"}},
        {5, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 50220, {L"50220 (ISO-2022 Japanese with no halfwidth Katakana)"}},
        {5, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 50221, {L"50221 (ISO-2022 Japanese with halfwidth Katakana)"}},
        {5, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 50222, {L"50222 (ISO-2022 Japanese JIS X 0201-1989)"}},
        {5, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 50225, {L"50225 (ISO-2022 Korean)"}},
        {5, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 50227, {L"50227 (ISO-2022 Simplified Chinese)"}},
        {5, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 50229, {L"50229 (ISO-2022 Traditional Chinese)"}},
        {2, {"?"}, {0xA1, 0xAC, 0xB0, 0xC8, 0xCA, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 51949, {L"51949 (EUC-Korean)"}},
        {5, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 52936, {L"52936 (HZ-GB2312 Simplified Chinese)"}},
        {4, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 54936, {L"54936 (GB18030 Simplified Chinese)"}},
        {2, {" "}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 55000, {L"55000 (SMS GSM 7bit)"}},
        {2, {" "}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 55001, {L"55001 (SMS GSM 7bit Spanish)"}},
        {2, {" "}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 55002, {L"55002 (SMS GSM 7bit Portuguese)"}},
        {2, {" "}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 55003, {L"55003 (SMS GSM 7bit Turkish)"}},
        {2, {" "}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 55004, {L"55004 (SMS GSM 7bit Greek)"}},
        {4, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 57002, {L"57002 (ISCII - Devanagari)"}},
        {4, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 57003, {L"57003 (ISCII - Bengali)"}},
        {4, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 57004, {L"57004 (ISCII - Tamil)"}},
        {4, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 57005, {L"57005 (ISCII - Telugu)"}},
        {4, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 57006, {L"57006 (ISCII - Assamese)"}},
        {4, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 57007, {L"57007 (ISCII - Odia (Oriya))"}},
        {4, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 57008, {L"57008 (ISCII - Kannada)"}},
        {4, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 57009, {L"57009 (ISCII - Malayalam)"}},
        {4, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 57010, {L"57010 (ISCII - Gujarati)"}},
        {4, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 57011, {L"57011 (ISCII - Punjabi (Gurmukhi))"}},
        {5, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 65000, {L"65000 (UTF-7)"}},
        {4, {"?"}, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, L'?', 65001, {L"65001 (UTF-8)"}},
    };


    _IRQL_requires_max_(PASSIVE_LEVEL)
    _Success_(return != 0)
    _When_((CountOfMultiByte == -1) && (CountOfWideChar != 0), _Post_equal_to_(_String_length_(WideCharStr) + 1))
    int WINAPI MUSA_NAME(MultiByteToWideChar)(
        _In_ UINT CodePage,
        _In_ DWORD Flags,
        _In_NLS_string_(CountOfMultiByte) LPCCH MultiByteStr,
        _In_ int CountOfMultiByte,
        _Out_writes_to_opt_(CountOfWideChar, return) LPWSTR WideCharStr,
        _In_ int CountOfWideChar
    )
    {
        PAGED_CODE();

        int ReturnLength = 0;
        NTSTATUS Status  = STATUS_NOT_SUPPORTED;

        do {
            ULONG BytesInUnicodeString = 0ul;

            if (CodePage == CP_ACP) {
                Status = RtlMultiByteToUnicodeSize(&BytesInUnicodeString, MultiByteStr, CountOfMultiByte);
                if (!Status) {
                    break;
                }

                ReturnLength = static_cast<int>(BytesInUnicodeString / sizeof(wchar_t));

                if (WideCharStr == nullptr || CountOfWideChar == 0) {
                    break;
                }

                if (CountOfWideChar < ReturnLength) {
                    ReturnLength = 0;
                    break;
                }

                Status = RtlMultiByteToUnicodeN(WideCharStr, static_cast<ULONG>(CountOfWideChar * sizeof(wchar_t)),
                    &BytesInUnicodeString, MultiByteStr, CountOfMultiByte);
                if (!Status) {
                    ReturnLength = 0;
                    break;
                }

                ReturnLength = static_cast<int>(BytesInUnicodeString / sizeof(wchar_t));
                break;
            }

            if (CodePage == CP_OEMCP) {
                Status = RtlMultiByteToUnicodeSize(&BytesInUnicodeString, MultiByteStr, CountOfMultiByte);
                if (!Status) {
                    break;
                }

                ReturnLength = static_cast<int>(BytesInUnicodeString / sizeof(wchar_t));

                if (WideCharStr == nullptr || CountOfWideChar == 0) {
                    break;
                }

                if (CountOfWideChar < ReturnLength) {
                    ReturnLength = 0;
                    break;
                }

                Status = RtlOemToUnicodeN(WideCharStr, static_cast<ULONG>(CountOfWideChar * sizeof(wchar_t)),
                    &BytesInUnicodeString, MultiByteStr, CountOfMultiByte);
                if (!Status) {
                    ReturnLength = 0;
                    break;
                }

                ReturnLength = static_cast<int>(BytesInUnicodeString / sizeof(wchar_t));
                break;
            }

            if (CodePage == CP_UTF8) {
                if (Flags) {
                    if (Flags != MB_ERR_INVALID_CHARS) {
                        Status = STATUS_INVALID_PARAMETER;
                        break;
                    }
                }

                Status = RtlUTF8ToUnicodeN(nullptr, 0,
                    &BytesInUnicodeString, MultiByteStr, CountOfMultiByte);
                if (!Status) {
                    break;
                }

                ReturnLength = static_cast<int>(BytesInUnicodeString / sizeof(wchar_t));

                if (WideCharStr == nullptr || CountOfWideChar == 0) {
                    break;
                }

                if (CountOfWideChar < ReturnLength) {
                    ReturnLength = 0;
                    break;
                }

                Status = RtlUTF8ToUnicodeN(WideCharStr, static_cast<ULONG>(CountOfWideChar * sizeof(wchar_t)),
                    &BytesInUnicodeString, MultiByteStr, CountOfMultiByte);
                if (!Status) {
                    ReturnLength = 0;
                    break;
                }

                ReturnLength = static_cast<int>(BytesInUnicodeString / sizeof(wchar_t));
                break;
            }

        } while (false);

        if (!NT_SUCCESS(Status)) {
            BaseSetLastNTError(Status);
        }

        return ReturnLength;
    }
    MUSA_IAT_SYMBOL(MultiByteToWideChar, 24);

    _IRQL_requires_max_(PASSIVE_LEVEL)
    _Success_(return != 0)
    _When_((CountOfWideChar == -1) && (CountOfMultiByte != 0), _Post_equal_to_(_String_length_(MultiByteStr) + 1))
    int WINAPI MUSA_NAME(WideCharToMultiByte)(
        _In_ UINT CodePage,
        _In_ DWORD Flags,
        _In_NLS_string_(CountOfWideChar) LPCWCH WideCharStr,
        _In_ int CountOfWideChar,
        _Out_writes_bytes_to_opt_(CountOfMultiByte, return) LPSTR MultiByteStr,
        _In_ int CountOfMultiByte,
        _In_opt_ LPCCH DefaultChar,
        _Out_opt_ LPBOOL UsedDefaultChar
    )
    {
        PAGED_CODE();

        int ReturnLength = 0;
        NTSTATUS Status  = STATUS_NOT_SUPPORTED;

        do {
            if (UsedDefaultChar) {
                *UsedDefaultChar = FALSE;
            }

            ULONG BytesInMultiByteString = 0ul;

            if (CodePage == CP_ACP) {
                Status = RtlUnicodeToMultiByteSize(&BytesInMultiByteString, WideCharStr, CountOfWideChar * sizeof(wchar_t));
                if (!Status) {
                    break;
                }

                ReturnLength = static_cast<int>(BytesInMultiByteString);

                if (MultiByteStr == nullptr || CountOfMultiByte == 0) {
                    break;
                }

                if (CountOfMultiByte < ReturnLength) {
                    ReturnLength = 0;
                    break;
                }

                Status = RtlUnicodeToMultiByteN(MultiByteStr, CountOfMultiByte,
                    &BytesInMultiByteString, WideCharStr, CountOfWideChar * sizeof(wchar_t));
                if (!Status) {
                    ReturnLength = 0;
                    break;
                }

                ReturnLength = static_cast<int>(BytesInMultiByteString);
                break;
            }

            if (CodePage == CP_OEMCP) {
                Status = RtlUnicodeToMultiByteSize(&BytesInMultiByteString, WideCharStr, CountOfWideChar * sizeof(wchar_t));
                if (!Status) {
                    break;
                }

                ReturnLength = static_cast<int>(BytesInMultiByteString);

                if (MultiByteStr == nullptr || CountOfMultiByte == 0) {
                    break;
                }

                if (CountOfMultiByte < ReturnLength) {
                    ReturnLength = 0;
                    break;
                }

                Status = RtlUnicodeToOemN(MultiByteStr, CountOfMultiByte,
                    &BytesInMultiByteString, WideCharStr, CountOfWideChar * sizeof(wchar_t));
                if (!Status) {
                    ReturnLength = 0;
                    break;
                }

                ReturnLength = static_cast<int>(BytesInMultiByteString);
                break;
            }

            if (CodePage == CP_UTF8) {
                if (Flags) {
                    if (Flags != MB_ERR_INVALID_CHARS) {
                        Status = STATUS_INVALID_PARAMETER;
                        break;
                    }
                }

                if (DefaultChar || UsedDefaultChar) {
                    Status = STATUS_INVALID_PARAMETER;
                    break;
                }

                Status = RtlUnicodeToUTF8N(nullptr, 0,
                    &BytesInMultiByteString, WideCharStr, CountOfWideChar * sizeof(wchar_t));
                if (!Status) {
                    break;
                }

                ReturnLength = static_cast<int>(BytesInMultiByteString);

                if (MultiByteStr == nullptr || CountOfMultiByte == 0) {
                    break;
                }

                if (CountOfMultiByte < ReturnLength) {
                    ReturnLength = 0;
                    break;
                }

                Status = RtlUnicodeToUTF8N(MultiByteStr, CountOfMultiByte,
                    &BytesInMultiByteString, WideCharStr, CountOfWideChar * sizeof(wchar_t));
                if (!Status) {
                    ReturnLength = 0;
                    break;
                }

                ReturnLength = static_cast<int>(BytesInMultiByteString);
                break;
            }

        } while (false);
    
        if (!NT_SUCCESS(Status)) {
            BaseSetLastNTError(Status);
        }

        return ReturnLength;
    }
    MUSA_IAT_SYMBOL(WideCharToMultiByte, 32);

    UINT WINAPI MUSA_NAME(GetACP)()
    {
        return NlsAnsiCodePage;
    }
    MUSA_IAT_SYMBOL(GetACP, 0);

    UINT WINAPI MUSA_NAME(GetOEMCP)()
    {
        return NlsOemCodePage;
    }
    MUSA_IAT_SYMBOL(GetOEMCP, 0);

    BOOL WINAPI MUSA_NAME(GetCPInfo)(
        _In_  UINT     CodePage,
        _Out_ LPCPINFO CPInfo
    )
    {
        NTSTATUS Status = STATUS_NOT_FOUND;

        switch (CodePage) {
        default:
            break;
        case CP_ACP:
        case CP_THREAD_ACP:
            CodePage = NlsAnsiCodePage;
            break;
        case CP_OEMCP:
            CodePage = NlsOemCodePage;
            break;
        }

        for (const auto Item : NlsCodePageInfoTable) {
            if (CodePage == Item.CodePage) {

                CPInfo->MaxCharSize = Item.MaxCharSize;
                RtlCopyMemory(&CPInfo->DefaultChar, Item.DefaultChar, sizeof(CPInfo->DefaultChar));
                RtlCopyMemory(&CPInfo->LeadByte, Item.LeadByte, sizeof(CPInfo->LeadByte));

                Status = STATUS_SUCCESS;
                break;
            }
        }

        if (NT_SUCCESS(Status)) {
            return TRUE;
        }

        BaseSetLastNTError(Status);
        return FALSE;
    }
    MUSA_IAT_SYMBOL(GetCPInfo, 8);

    BOOL WINAPI MUSA_NAME(GetCPInfoExW)(
        _In_  UINT         CodePage,
        _In_  DWORD        Flags,
        _Out_ LPCPINFOEXW  CPInfoEx
    )
    {
        NTSTATUS Status = STATUS_NOT_FOUND;

        do {
            if (Flags) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            switch (CodePage) {
            default:
                break;
            case CP_ACP:
            case CP_THREAD_ACP:
                CodePage = NlsAnsiCodePage;
                break;
            case CP_OEMCP:
                CodePage = NlsOemCodePage;
                break;
            }

            for (const auto Item : NlsCodePageInfoTable) {
                if (CodePage == Item.CodePage) {
                    *CPInfoEx = Item;

                    Status = STATUS_SUCCESS;
                    break;
                }
            }

        } while (false);

        if (NT_SUCCESS(Status)) {
            return TRUE;
        }

        BaseSetLastNTError(Status);
        return FALSE;
    }
    MUSA_IAT_SYMBOL(GetCPInfoExW, 12);

#endif

}
EXTERN_C_END
